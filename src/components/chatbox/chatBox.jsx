import React from 'react';
import { useState, useEffect, useRef } from 'react';
import { IoSendOutline } from "react-icons/io5";
import { IoMdClose } from "react-icons/io";
import { FaCheck } from "react-icons/fa6";
import './chatBoxStyle.css';


const ChatBoxFeature = () => {
    const p_min_price = 299;
    const p_max_price = 399;
    const durationForBargningInSeconds = 120;
    const inputRef = useRef(null);
    const chatMessagesRef = useRef(null);
    const listOfChatBoxClasses = [['chat-container', 'animateChatIn'], ['chat-container', 'animateChatOut']];
    const [animateChatIn, animateChatOut] = listOfChatBoxClasses;
    const [chatBoxClassses, setChatBoxClasses] = useState(animateChatIn);
    const [chatBtnStyle, setChatBtnStyle] = useState({ display: "block" });
    const [openChat, setOpenChat] = useState(false);
    const [closeChatBtn, setCloseChatBtn] = useState(false);
    const [connectWithSeller, setConnectWithSeller] = useState(false);                  // start bargning btn inside chat-box
    const [connectWithSupport, setConnectWithSupport] = useState(false);                // queries and support btn inside chat-box
    const [storeAutoGeneratedMessages, setStoreAutoGeneratedMessages] = useState([]);   // will store predefined Messages
    const [storeCustomerMessages, setStoreCustomerMessages] = useState([]);             // will store the customer messages
    const [storeSellerMessages, setStoreSellerMessages] = useState([p_max_price]);      // will store the seller messages
    const [currentMessage, setCurrentMessage] = useState('');                           // will store the current message
    const [lastCustomerMessage, setLastCustomerMessage] = useState('');
    const [storeMessages, setStoreMessages] = useState([]);                             // will store the seller+customer messages
    const [isSellerConnectedWithCustomer, setIsSellerConnectedWithCustomer] = useState(false);
    const [sentByCustomer, setSentByCustomer] = useState(false);
    const [chatTimeOut, setChatTimeOut] = useState(false);
    const [sellerFirstName, setSellerFirstName] = useState('');
    const [sellerlastName, setSellerLastName] = useState('');
    const minPriceTillNowSetBySeller = storeSellerMessages[storeSellerMessages.length - 1];
    const priceSelectedBtn = useState(false); 

    const objOfMinPriceWhileAutoPriceGeneration = {
        "100-125" : [[1, 5], [5, 7], [7, 8]], 
        "126-150" : [[4, 7], [7, 9], [9, 10]], 
        "151-200" : [[7, 10], [10, 13], [13, 15]]
    };

    const indianFirstNames = [
        "Aarav", "Vivaan", "Aditya", "Vihaan", "Arjun", "Sai", "Reyansh", "Ayaan", "Krishna", "Ishaan",
        "Diya", "Anaya", "Aadhya", "Kiara", "Pari", "Saanvi", "Anika", "Navya", "Myra", "Ira", "Ravi",
        "Praveer", "Sahil", "Rohan", "Prashant", "Pramod"
    ];

    const indianLastNames = [
        "Patel", "Sharma", "Reddy", "Singh", "Kumar", "Das", "Bose", "Rao", "Iyer", "Gupta",
        "Nair", "Mehta", "Joshi", "Naidu", "Chopra", "Desai", "Ghosh", "Varma", "Kapoor", "Malhotra", 
        "Maurya", "Malik", "Mishra", "Shetty"
    ];

    const getRandomElements = (array) => {
        return array[Math.floor(Math.random() * array.length)];
    }

    const newMessage = <div className="each-chat-container customer">
        <div className="input-message">{currentMessage}</div>
    </div>;


    const openChatFn = () => {
        console.log("One Price Chat Bot Opened");
        setChatBtnStyle({ display: "none" });
        setOpenChat(true);
    }

    const chatCloseFn = () => {
        setChatBtnStyle({ display: "block" });
        setCloseChatBtn(true);
        setChatBoxClasses(animateChatOut);
    }

    const currentTypedMessage = (event) => {
        setCurrentMessage(event.target.value);
    }

    const appendNewMessage = () => {
        if (currentMessage.trim() !== "") {
            setSentByCustomer(true);
            setStoreMessages(previousMessages => [...previousMessages, newMessage]);
            setStoreCustomerMessages(previousCustomerMessages => [...previousCustomerMessages, newMessage]);
            setLastCustomerMessage(parseInt(currentMessage));
            inputRef.current.value = "";
            setCurrentMessage('');
        }
    }

    const startChatTimer = () => {
        setTimeout(() => {
            console.log("Time is finished", isSellerConnectedWithCustomer);
            setIsSellerConnectedWithCustomer(false);
            setChatTimeOut(true);
            inputRef.current.value = "";
        }, durationForBargningInSeconds*1000);
        
    }

    const connectWithSellerBtn = () => {
        setConnectWithSeller(true);
        
        setStoreMessages(previousMessages => [...previousMessages, 
        <div className="each-chat-container seller">
            <div className='short-name bot-logo'>
                Bot
            </div>
            <div className="input-message seller-messages">Hey, Welcome to the Bargning Feature</div>
        </div>,
        <div className="each-chat-container seller">
            <div className='short-name bot-logo'>
                Bot
            </div>
            <div className="input-message seller-messages">Please hold for 1-2 minutes, I am connecting you to seller</div>
        </div> ]);
        
        setStoreAutoGeneratedMessages(previousSellerMessages => [...previousSellerMessages, 
            "Hey, Welcome to the Bargning Feature",
            "Please hold for 1-2 minutes, I am connecting you to seller"
        ]);

        console.log("connected with seller");
        const timeTakenToConnect = connectingTimeGenerator(1, 2);
        console.log(timeTakenToConnect+"seconds");
        setTimeout(() => {
            if(timeTakenToConnect >= 5){
                setStoreMessages(previousMessages => [...previousMessages, 
                <div className="each-chat-container seller">
                    <div className='short-name bot-logo'>
                        Bot
                    </div>
                    <div className="input-message seller-messages">
                        Sorry to say but all our customer executives are busy. So, please after sometime.
                    </div>
                </div>]);

                setStoreAutoGeneratedMessages(previousMessages => 
                    [...previousMessages, 
                        " Sorry to say but all our customer executives are busy. So, please after sometime."
                    ]);
            } else{
                const firstName = getRandomElements(indianFirstNames);
                const lastName = getRandomElements(indianLastNames);
                setSellerFirstName(firstName);
                setSellerLastName(lastName);
                setStoreMessages(previousMessages => [...previousMessages, 
                    <div className="each-chat-container seller">
                        <div className='short-name bot-logo'>
                            Bot
                        </div>
                        <div className="input-message seller-messages">
                            We have connected you to seller having name {firstName} {lastName}
                        </div>
                    </div> ]);
                
                setIsSellerConnectedWithCustomer(true);
                startChatTimer();
            }
        }, timeTakenToConnect * 1000);
    }

    const connectWithSupportBtn = () => {
        setConnectWithSupport(true);
    }

    const connectingTimeGenerator = (minSeconds = 3, maxSeconds = 5) => {
        return Math.floor(Math.random() * (maxSeconds - minSeconds + 1)) + minSeconds;
    }

    const priceSelection = (minPrice = 299, maxPrice = 399) => {
        return Math.floor(Math.random() * (maxPrice - minPrice + 1)) + minPrice;
    }

    const changeMinMaxPriceWhileAutoGeneration = () => {
        const currentSellerPrice = storeSellerMessages[storeSellerMessages.length - 1];
        const randomIndexForRange = Math.floor(Math.random() * 3);
        console.log(randomIndexForRange);
        let gapBetweenPrice;                 // this variable stores the ranges for the variation of the minPrice
        if(p_max_price-p_min_price >= 100 && p_max_price-p_min_price <= 125){
            gapBetweenPrice = objOfMinPriceWhileAutoPriceGeneration["100-125"][randomIndexForRange];            
        }
        else if(p_max_price-p_min_price > 125 && p_max_price-p_min_price <= 150){
            gapBetweenPrice = objOfMinPriceWhileAutoPriceGeneration["126-150"][randomIndexForRange];  
        }
        else{
            gapBetweenPrice = objOfMinPriceWhileAutoPriceGeneration["151-200"][randomIndexForRange];
        }

        console.log(gapBetweenPrice);
        const [min, max] = gapBetweenPrice;
        const minPrice = currentSellerPrice-priceSelection(min, max);

        return [minPrice, currentSellerPrice];
    }   

    const showMessagesAsPerCustomerLastMessage = (p_max_price, curr_price) => {
        console.log("Min", minPriceTillNowSetBySeller);
        const lastCustomerPrice = parseInt(lastCustomerMessage);
        const currentSellerPrice = curr_price;
        if(lastCustomerPrice > p_max_price){
            return `Are you interested in paying higher than product maximum price ?`;
        }
        else if(lastCustomerPrice > minPriceTillNowSetBySeller){
            return `But in your last messages minimum price offered by seller is ${minPriceTillNowSetBySeller}, Are you interested?`;
        }
        else if(currentSellerPrice-lastCustomerMessage < 5){
            // if(inputRef.current){
            //     inputRef.current.disabled = true;
            // }
            return `ok, seller has got convinced`;
        }
        else return currentSellerPrice;
    }

    useEffect(() => {

        if (closeChatBtn) {
            const timerId = setTimeout(() => {
                console.log("One Price Chat Bot has Closed");
                setOpenChat(false);
                setCloseChatBtn(false);
                setChatBoxClasses(animateChatIn);
            }, 500);

            return () => {
                clearTimeout(timerId);
            };
        }
    }, [closeChatBtn, animateChatIn]);

    
    useEffect(() => {
        if (chatMessagesRef.current) {
            chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;
        }
    }, [storeMessages]);


    useEffect(() => {
        if(sentByCustomer){
            const timeTakenToResponseBySeller = connectingTimeGenerator(1, 2);
            const intervalId = setInterval(() => {
                const [minPrice, maxPrice] = changeMinMaxPriceWhileAutoGeneration();
                const price = priceSelection(minPrice, maxPrice);
                const curr_seller_message = showMessagesAsPerCustomerLastMessage(p_max_price, price);
                const isNumber = !isNaN(curr_seller_message);
                if(isNumber || curr_seller_message === 'ok, seller has got convinced'){
                    setStoreSellerMessages(previousMessages => [...previousMessages, price]);
                    console.log("This is a number");
                }
                setStoreMessages(previousMessages => [...previousMessages, 
                    <div className="each-chat-container seller">
                        {isNumber && <div className='short-name s-logo'>
                            {sellerFirstName[0]+sellerlastName[0]}
                        </div>}
                        {!isNumber && <div className='short-name bot-logo'>
                            Bot
                        </div>}
                        <div className="input-message seller-messages">{/*Could you give it to me in*/} 
                            {curr_seller_message}
                        </div>
                        <div style={{display: 'flex', padding: '0.4rem', borderRadius: '5px', boxShadow: '0px 0px 3px #484F57', cursor: 'pointer'}}>
                            <FaCheck size={20} color='#484F57' />
                        </div>
                    </div>
                ]);

                setSentByCustomer(() => false);
            }, timeTakenToResponseBySeller*1000);

            return () => clearInterval(intervalId);
        }

        if(!sentByCustomer){
            if(inputRef.current){
                console.log("I have focused the input box");
                inputRef.current.focus();
            }
        }

    }, [sentByCustomer]);

    useEffect(() => {
        if(chatTimeOut){
            setTimeout(() => {
                const setPrice = minPriceTillNowSetBySeller;
                setStoreMessages(previousMessages => [...previousMessages, 
                    <div className="each-chat-container seller">
                        <div className='short-name bot-logo'>
                            Bot
                        </div>
                        <div className="input-message seller-messages">
                            Seller has left the room becuase your time is up.
                        </div>
                    </div>, 
                    <div className="each-chat-container seller">
                        <div className='short-name bot-logo'>
                            Bot
                        </div>
                        <div className="input-message seller-messages">
                            Product has been added in the cart with the lowest seller price {setPrice} 
                        </div>
                    </div>
                ]);

                setStoreAutoGeneratedMessages(previousMessages => [...previousMessages, 
                    "Seller has left the room becuase your time is up.", 
                    `Product has been added in the cart with the price ${setPrice}`
                ]);
            }, 3000);
        }
    }, [chatTimeOut]);

    useEffect(() => {
        if(isSellerConnectedWithCustomer){
            if(inputRef.current){
                console.log("I have focused the input box");
                inputRef.current.focus();
            }
        }
    }, [isSellerConnectedWithCustomer]);

    return (
        <>
            <div id="bargning-feature" className="start-bargning"
                onClick={openChatFn} style={chatBtnStyle}>
                Start Bargning
            </div>

            {openChat && <div className={chatBoxClassses.join(" ")} >
                <div className="chat-header">
                    <IoMdClose className='close-chat-btn' onClick={chatCloseFn} />
                    <h2>One Price</h2>
                    <span>Bargning with seller</span>
                </div>

                <div className="chat-messages" ref={chatMessagesRef}>
                    {(!connectWithSeller && !connectWithSupport ) && <div className="options-container">
                        <ul className='options'>
                            <li onClick={connectWithSellerBtn}>Start Bargning</li>
                            <li onClick={connectWithSupportBtn}>Queries and Support</li>
                        </ul>
                    </div>}
                    {storeMessages}
                </div>

                {(connectWithSeller || connectWithSupport) && <div className="chat-input">
                    <input type="number" placeholder="Enter your price....." id="user-input" onChange={currentTypedMessage} onKeyDown={(event) => {
                        if (event.key === 'Enter') {
                            appendNewMessage();
                        }
                    }} ref={inputRef} autoComplete='off' disabled={ isSellerConnectedWithCustomer ? (sentByCustomer ? true : false) : true } />

                    <IoSendOutline size={21} color='#FF693A' onClick={appendNewMessage} style={{ cursor: "pointer " }} />

                </div>}
            </div>}

        </>
    )
}

export default ChatBoxFeature;


// To keep remember:-
// after giving 3 minutes to customer and if in case customer did not selected the price then we will show them the options of previous
// prices to select one from them.